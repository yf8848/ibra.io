---
layout:     post
title:      内核segfault报错分析
subtitle:   利用dmesg分析内核错误
date:       2018-02-06
author:     abra
#header-img: img/post-bg-archlinux.png
catalog: true
tags:
    - linux
    - segfault
    - 段段错
    - dmesg
---

#### 引言
今天在写了程序，放在就起上测试；跑起来之后，一会儿程序就被kill了。

#### 分析
有时候我的程序异常终止，并不总是会产生core文件，即使设置了`ulimit`，这个我们所用的操作系统对具体的信号处理有关；今天遇到的异常终止的问题并没有产生core文件。
但是异常终止的程序造成系统异常一般会在系统日志里面打印错误信息。我们可以通过`dmesg` 命令查看系统错误日志。如下：

```
[34350007.548304] accounting[59068]: segfault at 21 ip 0000000000422743 sp 00007ffd5ad2f190 error 6 in accounting[400000+35d000]
[34350016.193731] accounting[59058]: segfault at 1f0 ip 0000000000422743 sp 00007ffcd7a52a30 error 6 in accounting[400000+35d000]
[34350016.281274] accounting[59063]: segfault at 1f0 ip 0000000000422743 sp 00007ffd5ad2f190 error 6 in accounting[400000+35d000]
[34350016.683645] accounting[59066]: segfault at 1f0 ip 0000000000422743 sp 00007ffd5ad2f190 error 6 in accounting[400000+35d000]
[34350016.684557] accounting[59064]: segfault at 1f0 ip 0000000000422743 sp 00007ffd5ad2f190 error 6 in accounting[400000+35d000]
[34350016.782546] accounting[59055]: segfault at 1f0 ip 0000000000422743 sp 00007ffcd7a52a30 error 6 in accounting[400000+35d000]
[34350018.023163] accounting[59056]: segfault at 1f0 ip 0000000000422743 sp 00007ffcd7a52a30 error 6 in accounting[400000+35d000]
[34350018.207775] accounting[59057]: segfault at 1f0 ip 0000000000422743 sp 00007ffcd7a52a30 error 6 in accounting[400000+35d000]
[34350019.118420] accounting[59065]: segfault at 1f0 ip 0000000000422743 sp 00007ffd5ad2f190 error 6 in accounting[400000+35d000]
[34350019.121158] accounting[59084]: segfault at 51 ip 0000000000422743 sp 00007ffdbe3451d0 error 6 in accounting[400000+35d000]
```


#### 内核 segfault 信息分析
看到这一串，可能会有点头大；其实认证分析下，可能很快很找到问题；
上面的信息一般都是由内核内存访问越界造成的，
不管是用户态程序还是内核态程序访问越界都会出 core dump，并在系统日志里面输出一条这样的信息。

这条信息的前面分别是访问越界的程序名，进程 ID 号，访问越界的地址以及当时进程堆栈地址等信息，比较有用的信息是最后的 error number。 在上面的信息中，error number 是 6。

下面详细介绍一下 error number 的信息：

在上面的信息中，error number 是 6，转成二进制就是 110，即 bit2 = 1,bit1 = 1,bit0 = 0 error number 是由 3 个字位组成的，从高到低分别是 bit2、bit1、bit0，所以它的取值范围是 0-7

    bit2: 值为 1 时表示是用户态程序内存访问越界，值为 0 时表示是内核态程序内存访问越界
    bit1: 值为 1 时表示是写操作导致内存访问越界，值为 0 时表示是读操作导致内存访问越界
    bit0: 值为 1 表示没有足够的权限访问非法地址的内容， 值为 0 时表示访问的非法地址根本没有对应的页面，也就是无效地址。

所以 error 6 就表示用户态程序进行写操作时访问的地址无效。

结合程序改动，很快可以分析程序非法访问内存的原因。

